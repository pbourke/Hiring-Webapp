<project name="MyProject" default="dist" basedir="." xmlns:ivy="antlib:org.apache.ivy.ant">
    <description>
        simple example build file
    </description>
	
    <property name="src.main.java" location="src/main/java"/>
	<property name="src.test.java" location="src/test/java" />
    <property name="src.web" location="src/main/web" />
  <property name="build.dir" location="build"/>
	<property name="build.war.dir" location="${build.dir}/war" />
	<property name="build.test.dir" location="${build.dir}/test-classes" />
	<property name="report.tests.dir" location="${build.dir}/test-results" />
	<property name="lib.resolved.dir" location="${build.dir}/lib" />	
	<property name="lib.bootstrap.dir" location="lib/bootstrap" />
	<property name="dist" location="${build.dir}/dist" />
	<property name="local.repo.dir" location="${user.home}/.ivy-repo" />

	<path id="compile.path">
		<fileset dir="${lib.resolved.dir}/compile" includes="**/*.jar" />
	</path>
	
	<path id="test.path">
		<fileset dir="${lib.resolved.dir}/test" includes="**/*.jar" />
		<pathelement location="${build.war.dir}/WEB-INF/classes"/>
		<pathelement location="${build.test.dir}"/>
		<pathelement location="${build.war.dir}"/>
	</path>
	
	<target name="init-ivy" description="Initialize Ivy for dependency management">
		<path id="ivy.path">
			<fileset dir="${lib.bootstrap.dir}" includes="*.jar" />
		</path>
		<taskdef resource="org/apache/ivy/ant/antlib.xml" 
			uri="antlib:org.apache.ivy.ant" classpathref="ivy.path" />
		<ivy:settings file="${basedir}/ivysettings.xml" />
		<ivy:retrieve pattern="${lib.resolved.dir}/[conf]/[artifact]-[revision].[ext]" type="jar" />
	</target>
	
  <target name="init" depends="init-ivy">
    <!-- Create the time stamp -->
    <tstamp/>
    <!-- Create the build directory structure used by compile -->
    <mkdir dir="${build.dir}"/>
  	<mkdir dir="${build.test.dir}"/>
    <mkdir dir="${build.war.dir}/WEB-INF" />
    <mkdir dir="${build.war.dir}/WEB-INF/classes" />
    <mkdir dir="${build.war.dir}/WEB-INF/lib" />
  	<mkdir dir="${dist}"/>
  	<mkdir dir="${report.tests.dir}"/>
  </target>

  <target name="compile" depends="init" description="compile the source " >
    <!-- Compile the java code from ${src.main.java} into ${build.dir} -->
    <javac srcdir="${src.main.java}" destdir="${build.war.dir}/WEB-INF/classes" classpathref="compile.path" debug="true" />
	<copy todir="${build.war.dir}/WEB-INF">
        <fileset dir="${src.web}/WEB-INF" includes="**/*"></fileset>
	</copy>
  </target>

  <target name="dist" depends="compile"
        description="generate the distribution" >
        <copy todir="${build.war.dir}/WEB-INF/lib">
        	<fileset dir="${lib.resolved.dir}/runtime" includes="*.jar" />
        </copy>
  		<war destfile="${dist}/test.war">
  			<fileset dir="${build.war.dir}" includes="**/*"></fileset>
  		</war>
  </target>

  <target name="clean"
        description="clean up" >
    <!-- Delete the ${build.dir} and ${dist} directory trees -->
    <delete dir="${build.dir}"/>
  	<delete dir="${dist}" />
  </target>
	
	<target name="test" depends="compile">
		<javac srcdir="${src.test.java}" destdir="${build.test.dir}" classpathref="test.path" debug="true"/>
		
		<!-- Copy non-java resource files src/test/java to the build directory -->
		<copy todir="${build.test.dir}">
			<fileset dir="${src.test.java}" includes="**/*" excludes="**/*.java" />
		</copy>
		<junit errorproperty="tests.failed" failureproperty="tests.failed">
			<classpath refid="test.path" />
			<batchtest todir="${report.tests.dir}">
				<fileset dir="${build.test.dir}" includes="**/*Test.class" />
				<formatter type="xml"/>
			</batchtest>
		</junit>
		<junitreport todir="${report.tests.dir}">
			<fileset dir="${report.tests.dir}" includes="**/TEST-*.xml" />
			<report todir="${report.tests.dir}"/>
		</junitreport>
		<fail if="tests.failed"/>
	</target>
</project>
